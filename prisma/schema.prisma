generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  name           String
  phone          String?
  licensePlates  String?        @unique
  bio            String?
  picture        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  creatorHistory Drive[]        @relation("creator")
  matchHistory   Drive[]        @relation("matcher-history")
  message        Message[]
  conversation   Conversation[]
}

model Drive {
  id            Int            @id @default(autoincrement())
  destination   Place          @relation("destinationPlace", fields: [destinationId], references: [id])
  departure     Place          @relation("departPlace", fields: [departureId], references: [id])
  price         String?
  available     Boolean        @default(true)
  timeStart     DateTime
  creatorId     Int
  matcher       User?          @relation("matcher-history", fields: [matcherId], references: [id])
  rating        Float?
  type          DriveType
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creator       User?          @relation("creator", fields: [creatorId], references: [id])
  driveHistory  DriveHistory[]
  matcherId     Int?
  destinationId Int            
  departureId   Int            
}

model DriveHistory {
  id           Int         @id @default(autoincrement())
  driveId      Int
  status       DriveStatus
  cancelReason String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  drive        Drive       @relation(fields: [driveId], references: [id])
}

model Message {
  id             Int          @id @default(autoincrement())
  sender         User         @relation(fields: [senderId], references: [id])
  message        String
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  createdAt      DateTime     @default(now())
}

model Conversation {
  id        Int       @id @default(autoincrement())
  user      User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// store socket id
model Information {
  id        Int      @id @default(autoincrement())
  userId    Int
  status    Boolean  @default(false)
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [userId, value], name: "information")
}

model Place {
  id         Int    @id @default(autoincrement())
  title      String
  address    String
  latitude   String
  longitude  String
  desination Drive? @relation("destinationPlace")
  departure  Drive? @relation("departPlace")
}

enum DriveStatus {
  waiting
  matched
}

enum DriveType {
  dinho
  yensau
}
